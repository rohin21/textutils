{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlfor","placeholder","TextForm","useState","text","setText","heading","onChange","event","target","value","rows","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","length","Alert","alert","msg","PropType","PropTypes","string","isRequired","aboutTitle","defaultProps","App","setMode","body","style","backgroundColor","color","showAlert","setAlert","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.89f2c67a.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                {/*<Link className=\"nav-link\" to=\"/about\">{props.aboutTitle}</Link>*/}\r\n                            </li>\r\n                        </ul>\r\n                        <div className=\"form-check form-switch mx-2\">\r\n                            <input onClick={props.toggleMode} className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                            <label className={`form-check-label text-${props.mode === 'light' ? 'dark' : 'light'}`} htmlfor=\"flexSwitchCheckDefault\">{props.mode === 'light' ? 'Dark' : 'Light'} Mode</label>\r\n                        </div>\r\n                        <form className=\"d-flex\">\r\n                            <input  className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                            <button className={`btn btn-outline-${props.mode === 'light' ? 'dark' : 'light'}`} type=\"submit\">Search</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </nav> \r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.PropType = { title : PropTypes.string.isRequired,\r\n    aboutTitle : PropTypes.string.isRequired,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'TextUtils',\r\n    aboutTitle: 'About TextUtils',\r\n}","import React,{ useState } from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text,setText] = useState('Enter your text.');\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    };\r\n    const handleLoClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    };\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value);\r\n    };\r\n    const handleCopy = ()=>{\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n    } \r\n    return (\r\n        <>\r\n        <div className='container'>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"container mb-3\">\r\n                <textarea className={`form-control bg-${props.mode === 'dark' ? 'dark' : 'light'} text-${props.mode === 'light' ? 'dark' : 'light'}`} onChange={handleOnChange} id=\"myBox\" rows=\"8\" value={text}></textarea>\r\n            </div>\r\n            <button onClick={handleUpClick} className='btn btn-outline-secondary mx-2'>Convert to UpperCase</button>\r\n            <button onClick={handleLoClick} className='btn btn-outline-secondary mx-2'>Convert to LowerCase</button>\r\n            <button onClick={handleCopy} className='btn btn-outline-secondary mx-2'>Copy Text</button>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n            <h1>Your Text Summary</h1>\r\n            <p>{text.split(\" \").length} words and {text.length} characters </p>\r\n            <p>{0.008* text.split(\" \").length} minutes to read. </p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length > 0 ? text : 'Enter text to preview' }</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n\treturn (\r\n\t\tprops.alert && <div>\r\n\t\t\t<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role='alert'>\r\n                <strong>{props.alert.type}</strong>:{props.alert.msg}\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype='button'\r\n\t\t\t\t\tclassName='btn-close'\r\n\t\t\t\t\tdata-bs-dismiss='alert'\r\n\t\t\t\t\taria-label='Close'>\r\n                </button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\nfunction App() {\n  const [mode,setMode] = useState('light');\n  const toggleMode= ()=>{\n    if(mode === 'light')\n    {setMode('dark');\n      document.body.style.backgroundColor = 'black';\n      document.body.style.color = 'white';\n      showAlert(\"Dark Mode Enabled\",\"Success\");\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      showAlert(\"Light Mode Enabled\",\"Success\");\n    }\n  };\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message,type)=>{\n    setAlert(\n      {\n        msg: message,\n        type: type,\n      }\n      \n    );\n    setTimeout(()=>{setAlert(null)},2000);\n  };\n\n  return (\n    <>\n        {/*<Router>*/}\n        <Navbar title=\"Text Utils\" aboutTitle=\"About TextUtils\" mode={mode} toggleMode={toggleMode}/>\n        <Alert alert={alert}/>\n        <div className=\"container my-3\">\n        {/*<Routes>*/}\n          {/*<Route exact path=\"/about\" element={<About mode={mode}/>}/>*/}\n          {/*<Route exact path=\"/\" element={<TextForm heading=\"Enter Text\" mode={mode} toggleMode={ toggleMode } />}/>*/}\n          <TextForm heading=\"Enter Text\" mode={mode} toggleMode={ toggleMode } />\n        {/*</Routes>*/}\n        </div>\n        {/*</Router>*/}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}